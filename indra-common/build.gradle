plugins {
  alias(libs.plugins.kotlin)
}

kotlin {
  coreLibrariesVersion = "1.3.21"
  target {
    compilations.configureEach {
      kotlinOptions {
        jvmTarget = "1.8"
        languageVersion = "1.3"
      }
    }
  }
}

sourceSets {
  kotlinSupport
}

tasks.named('jar').configure {
  from(sourceSets.kotlinSupport.output)
}

pluginUnderTestMetadata {
  // Use a packaged form of our plugin to support our classpath hackery
  // def oldFrom = pluginClasspath.from
  pluginClasspath.from = tasks.named('jar').map { it.outputs }
  pluginClasspath.from sourceSets.main.runtimeClasspath
}

dependencies {
  compileOnlyApi variantOf(libs.immutables.value) { classifier('annotations') }
  annotationProcessor libs.immutables.value
  compileOnlyApi libs.immutables.builder
  compileOnlyApi libs.jetbrainsAnnotations
  api project(":indra-git")
  implementation libs.missingMetadataGuava
  implementation libs.cadixLicenser
  implementation libs.asm
  api libs.mammoth
  testImplementation project(":indra-testlib")

  // Kotlin plugin dep
  kotlinSupportCompileOnly libs.kotlinPlugin
  kotlinSupportCompileOnly(gradleApi())
  compileOnly(sourceSets.kotlinSupport.output)
}

indraPluginPublishing {
  plugin(
    "indra",
    "net.kyori.indra.IndraPlugin",
    "Indra",
    "Simplified tools for configuring modern JVM projects",
    ["boilerplate", "java", "jvm"]
  )

  plugin(
    "indra.checkstyle",
    "net.kyori.indra.IndraCheckstylePlugin",
    "Indra Checkstyle",
    "Checkstyle configuration in line with the Indra file layout",
    ["boilerplate", "checkstyle"]
  )

  plugin(
    "indra.license-header",
    "net.kyori.indra.IndraLicenseHeaderPlugin",
    "Indra License Header",
    "License header configuration in line with the Indra file layout",
    ["boilerplate", "license", "license-header", "licensing"]
  )

  plugin(
    "indra.publishing",
    "net.kyori.indra.IndraPublishingPlugin",
    "Indra Publishing",
    "Reasonable publishing configuration and repository aliases",
    ["boilerplate", "publishing", "nexus"]
  )
}
